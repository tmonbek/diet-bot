package handlers

import (
	"context"
	postgres "diet-bot/internal/store"
	"fmt"
	"log"
	"log/slog"
	"math"
	"strconv"

	"github.com/jackc/pgx/v5"
	tele "gopkg.in/telebot.v4"
)

var userData = make(map[int64]map[string]float64)
var userStates = make(map[int64]string)

func Register(b *tele.Bot) {
	b.Handle("/hello", func(c tele.Context) error {
		return c.Send("Hello!")
	})

	b.Handle("/start", func(c tele.Context) error {
		var userID int64
		err := postgres.Pool.QueryRow(context.Background(),
			"SELECT user_id FROM users WHERE user_id = $1",
			c.Chat().ID,
		).Scan(&userID)

		if err != nil {
			if err == pgx.ErrNoRows {
				var newID int
				err = postgres.Pool.QueryRow(context.Background(),
					"INSERT INTO users (user_id) VALUES ($1) RETURNING id",
					c.Chat().ID,
				).Scan(&newID)

				if err != nil {
					log.Printf("Insert error: %v", err)
					return c.Send("Something went wrong. Please try again later.")
				}

				return c.Send(fmt.Sprintf("Welcome %s!", c.Sender().FirstName))
			} else {
				log.Printf("Query error: %v", err)
				return c.Send("Something went wrong. Please try again later.")
			}
		}

		return c.Send(fmt.Sprintf("Welcome back %s!", c.Sender().FirstName))
	})

	b.Handle("/getInfo", func(c tele.Context) error {
		return c.Send("Hello!")
	})

	b.Handle("/products", func(c tele.Context) error {
		return c.Send("—Ç—É—Ö—É–º, –ø–æ–º–∏–¥–æ—Ä, –∑–µ–ª–µ–Ω—å, –≥—Ä—É–¥–∏–Ω–∫–∞, –æ–ª–∏–≤–∫–∞, –±–æ–¥—Ä–∏–Ω–≥, –º–æ–ª –≥–æ—à—Ç–∏")
	})

	b.Handle("/help", func(c tele.Context) error {
		ID := c.Chat().ID

		slog.Info("help", "chatID", ID)

		return c.Send("Hello!")
	})

	b.Handle("/options", func(c tele.Context) error {
		userID := c.Chat().ID
		data, ok := userData[userID]
		if !ok || data["height"] == 0 || data["weight"] == 0 {
			userStates[userID] = "awaiting_height"
			return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–Ω–∞—á–∞–ª–∞ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):")
		}

		bjuBtn := tele.Btn{Unique: "get_bju", Text: "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ë–ñ–£"}
		inlineMenu := &tele.ReplyMarkup{}
		inlineMenu.Inline(
			inlineMenu.Row(inlineMenu.Data(bjuBtn.Text, bjuBtn.Unique)),
		)

		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", inlineMenu)
	})

	bjuBtn := tele.Btn{Unique: "get_bju", Text: "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ë–ñ–£"}
	mealPlanBtn := tele.Btn{Unique: "get_meal_plan", Text: "–ü–ª–∞–Ω –±–ª—é–¥ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è"}

	b.Handle(&bjuBtn, func(c tele.Context) error {
		userID := c.Sender().ID
		data, ok := userData[userID]
		if !ok || data["height"] == 0 || data["weight"] == 0 {
			return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é /start.")
		}

		height := data["height"]
		weight := data["weight"]

		result, needsWeightLoss := calculateBJU(height, weight)

		if needsWeightLoss {
			inlineMenu := &tele.ReplyMarkup{}
			inlineMenu.Inline(
				inlineMenu.Row(mealPlanBtn),
			)
			return c.Send(result, inlineMenu)
		}

		return c.Send(result)
	})

	b.Handle(tele.OnText, func(c tele.Context) error {
		userID := c.Chat().ID
		state := userStates[userID]
		text := c.Text()

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
		if _, exists := userData[userID]; !exists {
			userData[userID] = make(map[string]float64)
		}

		switch state {
		case "awaiting_height":
			height, err := strconv.ParseFloat(text, 64)
			if err != nil || height < 50 || height > 300 {
				return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–≤ —Å–º):")
			}
			userData[userID]["height"] = height
			userStates[userID] = "awaiting_weight"
			return c.Send("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥:")
		case "awaiting_weight":
			weight, err := strconv.ParseFloat(text, 64)
			if err != nil || weight < 20 || weight > 300 {
				return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–≤ –∫–≥):")
			}
			userData[userID]["weight"] = weight
			userStates[userID] = "completed"

			bjuBtn := tele.Btn{Unique: "get_bju", Text: "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ë–ñ–£"}
			inlineMenu := &tele.ReplyMarkup{}
			inlineMenu.Inline(
				inlineMenu.Row(inlineMenu.Data(bjuBtn.Text, bjuBtn.Unique)),
			)
			return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", inlineMenu)
		default:
			return c.Send("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
		}
	})

	b.Handle(&mealPlanBtn, func(c tele.Context) error {
		userID := c.Sender().ID
		data := userData[userID]

		// –°—É—Ç–æ—á–Ω—ã–µ –Ω–æ—Ä–º—ã
		calories := 24*data["weight"] - 500
		protein := data["weight"] * 1.5
		fat := data["weight"] * 0.8
		carbs := (calories - (protein*4 + fat*9)) / 4

		// –ü—Ä–æ–¥—É–∫—Ç—ã —Å –ë–ñ–£ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
		products := map[string]struct {
			Protein float64
			Fat     float64
			Carbs   float64
			Max     float64 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ø–æ—Ä—Ü–∏—è
		}{
			"—è–π—Ü–æ":     {12.7, 11.5, 0.7, 200}, // –ú–∞–∫—Å 4 —è–π—Ü–∞ (~200–≥)
			"–ø–æ–º–∏–¥–æ—Ä":  {0.9, 0.2, 3.9, 300},
			"–∑–µ–ª–µ–Ω—å":   {2.0, 0.5, 5.0, 100},
			"–≥—Ä—É–¥–∏–Ω–∫–∞": {22.0, 3.0, 0.0, 250},
			"–æ–ª–∏–≤–∫–∏":   {1.0, 15.0, 6.0, 50}, // ~10 –æ–ª–∏–≤–æ–∫
			"–æ–≥—É—Ä–µ—Ü":   {0.8, 0.1, 2.5, 300},
			"–≥–æ–≤—è–¥–∏–Ω–∞": {26.0, 15.0, 0.0, 200},
			"—Ä—ã–±–∞":     {20.0, 5.0, 0.0, 300},
			"–º–∞—Å–ª–æ":    {0.0, 100.0, 0.0, 15}, // 1 —Å—Ç.–ª.
		}

		// –£–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
		calcPortion := func(product string, targetProtein, targetFat, targetCarbs float64) float64 {
			p := products[product]
			var grams float64

			if p.Protein > 0 {
				grams = targetProtein / (p.Protein / 100)
			}
			if p.Fat > 0 {
				grams = math.Max(grams, targetFat/(p.Fat/100))
			}
			if p.Carbs > 0 {
				grams = math.Max(grams, targetCarbs/(p.Carbs/100))
			}

			// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ—Ä—Ü–∏–∏
			return math.Min(math.Round(grams), p.Max)
		}

		// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ë–ñ–£ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
		breakfastEggs := calcPortion("—è–π—Ü–æ", protein*0.3, fat*0.1, 0)
		breakfastVeggies := calcPortion("–ø–æ–º–∏–¥–æ—Ä", 0, 0, carbs*0.2)

		lunchMeat := calcPortion("–≥—Ä—É–¥–∏–Ω–∫–∞", protein*0.35, fat*0.2, 0)
		lunchSalad := calcPortion("–æ–≥—É—Ä–µ—Ü", 0, 0, carbs*0.3)

		dinnerFish := calcPortion("—Ä—ã–±–∞", protein*0.25, fat*0.2, 0)
		dinnerVeggies := calcPortion("–ø–æ–º–∏–¥–æ—Ä", 0, 0, carbs*0.2)

		snackBeef := calcPortion("–≥–æ–≤—è–¥–∏–Ω–∞", protein*0.1, fat*0.1, 0)
		snackOlives := calcPortion("–æ–ª–∏–≤–∫–∏", 0, fat*0.1, 0)

		oil := calcPortion("–º–∞—Å–ª–æ", 0, fat*0.2, 0)

		mealPlan := fmt.Sprintf(`üç≥ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–ª–∞–Ω (%.0f –∫–∫–∞–ª)

			üåÖ –ó–∞–≤—Ç—Ä–∞–∫:
			- %.0f–≥ —è–∏—Ü (%.1f–≥ –±–µ–ª–∫–∞)
			- %.0f–≥ –ø–æ–º–∏–¥–æ—Ä–æ–≤ —Å –∑–µ–ª–µ–Ω—å—é
			- %.1f–≥ –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞

			‚òÄ –ü–µ—Ä–µ–∫—É—Å:
			- %.0f–≥ –≥–æ–≤—è–¥–∏–Ω—ã
			- %.0f–≥ –æ–≥—É—Ä—Ü–æ–≤
			- %.0f–≥ –æ–ª–∏–≤–æ–∫

			üçó –û–±–µ–¥:
			- %.0f–≥ –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏
			- %.0f–≥ –æ–≤–æ—â–Ω–æ–≥–æ —Å–∞–ª–∞—Ç–∞
			- %.1f–≥ –º–∞—Å–ª–∞

			üêü –£–∂–∏–Ω:
			- %.0f–≥ —Ä—ã–±—ã
			- %.0f–≥ —Ç—É—à–µ–Ω—ã—Ö –æ–≤–æ—â–µ–π
			- –ó–µ–ª–µ–Ω—å

			üìä –ò—Ç–æ–≥–æ:
			‚ö° –ë–µ–ª–∫–∏: %.1f–≥ | üõ¢ –ñ–∏—Ä—ã: %.1f–≥ | üåæ –£–≥–ª–µ–≤–æ–¥—ã: %.1f–≥`,
			calories,
			breakfastEggs, breakfastEggs*products["—è–π—Ü–æ"].Protein/100,
			breakfastVeggies,
			oil/2,
			snackBeef,
			calcPortion("–æ–≥—É—Ä–µ—Ü", 0, 0, carbs*0.1),
			snackOlives,
			lunchMeat,
			lunchSalad,
			oil/2,
			dinnerFish,
			dinnerVeggies,
			protein, fat, carbs)

		return c.Send(mealPlan)
	})

	slog.Info("handlers registered")
}

func calculateBJU(height, weight float64) (string, bool) {
	heightInMeters := height / 100
	bmi := weight / (heightInMeters * heightInMeters)

	calories := 24 * weight
	protein := weight * 1.5
	fat := weight * 0.8
	carbs := (calories - (protein*4 + fat*9)) / 4

	needsWeightLoss := bmi > 25
	weightStatus := "–£ –≤–∞—Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å."
	if needsWeightLoss {
		weightStatus = "–£ –≤–∞—Å –ª–∏—à–Ω–∏–π –≤–µ—Å. –ù—É–∂–Ω–æ —Ö—É–¥–µ—Ç—å."
		calories -= 500
	}

	message := fmt.Sprintf(
		"–¢–≤–æ—è –ø—Ä–∏–º–µ—Ä–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞:\n\n–ö–∞–ª–æ—Ä–∏–∏: %.0f –∫–∫–∞–ª\n–ë–µ–ª–∫–∏: %.1f –≥\n–ñ–∏—Ä—ã: %.1f –≥\n–£–≥–ª–µ–≤–æ–¥—ã: %.1f –≥\n\n–ò–ú–¢: %.1f\n%s",
		calories, protein, fat, carbs, bmi, weightStatus)

	return message, needsWeightLoss
}
